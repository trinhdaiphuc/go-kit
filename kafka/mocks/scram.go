// Code generated by MockGen. DO NOT EDIT.
// Source: scram.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/scram.go -source=scram.go -package=kafkamock
//

// Package kafkamock is a generated GoMock package.
package kafkamock

import (
	hash "hash"
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "go.uber.org/mock/gomock"
)

// MockAlgorithm is a mock of Algorithm interface.
type MockAlgorithm struct {
	ctrl     *gomock.Controller
	recorder *MockAlgorithmMockRecorder
	isgomock struct{}
}

// MockAlgorithmMockRecorder is the mock recorder for MockAlgorithm.
type MockAlgorithmMockRecorder struct {
	mock *MockAlgorithm
}

// NewMockAlgorithm creates a new mock instance.
func NewMockAlgorithm(ctrl *gomock.Controller) *MockAlgorithm {
	mock := &MockAlgorithm{ctrl: ctrl}
	mock.recorder = &MockAlgorithmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlgorithm) EXPECT() *MockAlgorithmMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockAlgorithm) Hash() hash.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(hash.Hash)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockAlgorithmMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockAlgorithm)(nil).Hash))
}

// Name mocks base method.
func (m *MockAlgorithm) Name() sarama.SASLMechanism {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(sarama.SASLMechanism)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAlgorithmMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAlgorithm)(nil).Name))
}
