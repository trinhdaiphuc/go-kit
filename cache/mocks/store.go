// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/store.go -source=store.go -package=cachemock
//

// Package cachemock is a generated GoMock package.
package cachemock

import (
	context "context"
	reflect "reflect"
	time "time"

	cache "github.com/trinhdaiphuc/go-kit/cache"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore[K comparable, V any] struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder[K, V]
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder[K comparable, V any] struct {
	mock *MockStore[K, V]
}

// NewMockStore creates a new mock instance.
func NewMockStore[K comparable, V any](ctrl *gomock.Controller) *MockStore[K, V] {
	mock := &MockStore[K, V]{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore[K, V]) EXPECT() *MockStoreMockRecorder[K, V] {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore[K, V]) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder[K, V]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore[K, V])(nil).Close))
}

// Delete mocks base method.
func (m *MockStore[K, V]) Delete(ctx context.Context, keys ...K) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder[K, V]) Delete(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore[K, V])(nil).Delete), varargs...)
}

// Expire mocks base method.
func (m *MockStore[K, V]) Expire(ctx context.Context, key K, expireTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, expireTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockStoreMockRecorder[K, V]) Expire(ctx, key, expireTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockStore[K, V])(nil).Expire), ctx, key, expireTime)
}

// Get mocks base method.
func (m *MockStore[K, V]) Get(ctx context.Context, key K) (V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreMockRecorder[K, V]) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore[K, V])(nil).Get), ctx, key)
}

// HDel mocks base method.
func (m *MockStore[K, V]) HDel(ctx context.Context, key K, fields ...K) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// HDel indicates an expected call of HDel.
func (mr *MockStoreMockRecorder[K, V]) HDel(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockStore[K, V])(nil).HDel), varargs...)
}

// HGet mocks base method.
func (m *MockStore[K, V]) HGet(ctx context.Context, key, field K) (V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", ctx, key, field)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet.
func (mr *MockStoreMockRecorder[K, V]) HGet(ctx, key, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockStore[K, V])(nil).HGet), ctx, key, field)
}

// HGetAll mocks base method.
func (m *MockStore[K, V]) HGetAll(ctx context.Context, key K) (map[K]V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", ctx, key)
	ret0, _ := ret[0].(map[K]V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll.
func (mr *MockStoreMockRecorder[K, V]) HGetAll(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockStore[K, V])(nil).HGetAll), ctx, key)
}

// HSet mocks base method.
func (m *MockStore[K, V]) HSet(ctx context.Context, key K, keyVals ...cache.KeyVal[K, V]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range keyVals {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HSet", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSet indicates an expected call of HSet.
func (mr *MockStoreMockRecorder[K, V]) HSet(ctx, key any, keyVals ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, keyVals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockStore[K, V])(nil).HSet), varargs...)
}

// Incr mocks base method.
func (m *MockStore[K, V]) Incr(ctx context.Context, key K, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockStoreMockRecorder[K, V]) Incr(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockStore[K, V])(nil).Incr), ctx, key, value)
}

// Ping mocks base method.
func (m *MockStore[K, V]) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoreMockRecorder[K, V]) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore[K, V])(nil).Ping), ctx)
}

// Set mocks base method.
func (m *MockStore[K, V]) Set(ctx context.Context, key K, value V, expireSecond time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expireSecond)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoreMockRecorder[K, V]) Set(ctx, key, value, expireSecond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStore[K, V])(nil).Set), ctx, key, value, expireSecond)
}

// SetNX mocks base method.
func (m *MockStore[K, V]) SetNX(ctx context.Context, key K, value V, expireSecond time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, value, expireSecond)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX.
func (mr *MockStoreMockRecorder[K, V]) SetNX(ctx, key, value, expireSecond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockStore[K, V])(nil).SetNX), ctx, key, value, expireSecond)
}

// TTL mocks base method.
func (m *MockStore[K, V]) TTL(ctx context.Context, key K) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", ctx, key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL.
func (mr *MockStoreMockRecorder[K, V]) TTL(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockStore[K, V])(nil).TTL), ctx, key)
}

// MockLoader is a mock of Loader interface.
type MockLoader[K comparable, V any] struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder[K, V]
	isgomock struct{}
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder[K comparable, V any] struct {
	mock *MockLoader[K, V]
}

// NewMockLoader creates a new mock instance.
func NewMockLoader[K comparable, V any](ctrl *gomock.Controller) *MockLoader[K, V] {
	mock := &MockLoader[K, V]{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader[K, V]) EXPECT() *MockLoaderMockRecorder[K, V] {
	return m.recorder
}

// Load mocks base method.
func (m *MockLoader[K, V]) Load(ctx context.Context, c cache.Store[K, V], key K) (V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, c, key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockLoaderMockRecorder[K, V]) Load(ctx, c, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLoader[K, V])(nil).Load), ctx, c, key)
}

// LoadAll mocks base method.
func (m *MockLoader[K, V]) LoadAll(ctx context.Context, c cache.Store[K, V], key K) (map[K]V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAll", ctx, c, key)
	ret0, _ := ret[0].(map[K]V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAll indicates an expected call of LoadAll.
func (mr *MockLoaderMockRecorder[K, V]) LoadAll(ctx, c, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAll", reflect.TypeOf((*MockLoader[K, V])(nil).LoadAll), ctx, c, key)
}
