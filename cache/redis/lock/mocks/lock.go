// Code generated by MockGen. DO NOT EDIT.
// Source: lock.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/lock.go -source=lock.go -package=redislock
//

// Package redislock is a generated GoMock package.
package redislock

import (
	context "context"
	reflect "reflect"
	time "time"

	redislock "github.com/trinhdaiphuc/go-kit/cache/redis/lock"
	gomock "go.uber.org/mock/gomock"
)

// MockLockMutex is a mock of LockMutex interface.
type MockLockMutex struct {
	ctrl     *gomock.Controller
	recorder *MockLockMutexMockRecorder
	isgomock struct{}
}

// MockLockMutexMockRecorder is the mock recorder for MockLockMutex.
type MockLockMutexMockRecorder struct {
	mock *MockLockMutex
}

// NewMockLockMutex creates a new mock instance.
func NewMockLockMutex(ctrl *gomock.Controller) *MockLockMutex {
	mock := &MockLockMutex{ctrl: ctrl}
	mock.recorder = &MockLockMutexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockMutex) EXPECT() *MockLockMutexMockRecorder {
	return m.recorder
}

// TryLockContext mocks base method.
func (m *MockLockMutex) TryLockContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLockContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryLockContext indicates an expected call of TryLockContext.
func (mr *MockLockMutexMockRecorder) TryLockContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLockContext", reflect.TypeOf((*MockLockMutex)(nil).TryLockContext), ctx)
}

// Unlock mocks base method.
func (m *MockLockMutex) Unlock() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockMutexMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLockMutex)(nil).Unlock))
}

// MockRedLock is a mock of RedLock interface.
type MockRedLock struct {
	ctrl     *gomock.Controller
	recorder *MockRedLockMockRecorder
	isgomock struct{}
}

// MockRedLockMockRecorder is the mock recorder for MockRedLock.
type MockRedLockMockRecorder struct {
	mock *MockRedLock
}

// NewMockRedLock creates a new mock instance.
func NewMockRedLock(ctrl *gomock.Controller) *MockRedLock {
	mock := &MockRedLock{ctrl: ctrl}
	mock.recorder = &MockRedLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedLock) EXPECT() *MockRedLockMockRecorder {
	return m.recorder
}

// GetLock mocks base method.
func (m *MockRedLock) GetLock(key string, expiry time.Duration) redislock.LockMutex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLock", key, expiry)
	ret0, _ := ret[0].(redislock.LockMutex)
	return ret0
}

// GetLock indicates an expected call of GetLock.
func (mr *MockRedLockMockRecorder) GetLock(key, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLock", reflect.TypeOf((*MockRedLock)(nil).GetLock), key, expiry)
}
